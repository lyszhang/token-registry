/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TitleEscrowErrors,
  TitleEscrowErrorsInterface,
} from "../../../contracts/interfaces/TitleEscrowErrors";

const _abi = [
  {
    inputs: [],
    name: "CallerNotBeneficiary",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotHolder",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyReceivingData",
    type: "error",
  },
  {
    inputs: [],
    name: "InactiveTitleEscrow",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidNominee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
    ],
    name: "InvalidRegistry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "InvalidTokenId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
    ],
    name: "InvalidTokenTransferToZeroAddressOwners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NomineeAlreadyNominated",
    type: "error",
  },
  {
    inputs: [],
    name: "RecipientAlreadyHolder",
    type: "error",
  },
  {
    inputs: [],
    name: "RegistryContractPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "TargetNomineeAlreadyBeneficiary",
    type: "error",
  },
  {
    inputs: [],
    name: "TitleEscrowNotHoldingToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotSurrendered",
    type: "error",
  },
];

export class TitleEscrowErrors__factory {
  static readonly abi = _abi;
  static createInterface(): TitleEscrowErrorsInterface {
    return new utils.Interface(_abi) as TitleEscrowErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TitleEscrowErrors {
    return new Contract(address, _abi, signerOrProvider) as TitleEscrowErrors;
  }
}
