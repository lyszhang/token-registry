/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TDocDeployerErrors,
  TDocDeployerErrorsInterface,
} from "../../../contracts/interfaces/TDocDeployerErrors";

const _abi = [
  {
    inputs: [],
    name: "ImplementationAlreadyAdded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "ImplementationInitializationFailure",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedImplementationContractAddress",
    type: "error",
  },
];

export class TDocDeployerErrors__factory {
  static readonly abi = _abi;
  static createInterface(): TDocDeployerErrorsInterface {
    return new utils.Interface(_abi) as TDocDeployerErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TDocDeployerErrors {
    return new Contract(address, _abi, signerOrProvider) as TDocDeployerErrors;
  }
}
