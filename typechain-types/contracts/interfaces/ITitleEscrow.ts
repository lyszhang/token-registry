/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ITitleEscrowInterface extends utils.Interface {
  functions: {
    "active()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "holder()": FunctionFragment;
    "isHoldingToken()": FunctionFragment;
    "nominate(address)": FunctionFragment;
    "nominee()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "registry()": FunctionFragment;
    "shred()": FunctionFragment;
    "surrender()": FunctionFragment;
    "tokenId()": FunctionFragment;
    "transferBeneficiary(address)": FunctionFragment;
    "transferHolder(address)": FunctionFragment;
    "transferOwners(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "beneficiary"
      | "holder"
      | "isHoldingToken"
      | "nominate"
      | "nominee"
      | "onERC721Received"
      | "registry"
      | "shred"
      | "surrender"
      | "tokenId"
      | "transferBeneficiary"
      | "transferHolder"
      | "transferOwners"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "holder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isHoldingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nominate", values: [string]): string;
  encodeFunctionData(functionFragment: "nominee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "shred", values?: undefined): string;
  encodeFunctionData(functionFragment: "surrender", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwners",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isHoldingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nominate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nominee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shred", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "surrender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwners",
    data: BytesLike
  ): Result;

  events: {
    "BeneficiaryTransfer(address,address,address,uint256)": EventFragment;
    "HolderTransfer(address,address,address,uint256)": EventFragment;
    "Nomination(address,address,address,uint256)": EventFragment;
    "Shred(address,uint256)": EventFragment;
    "Surrender(address,address,uint256)": EventFragment;
    "TokenReceived(address,address,bool,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HolderTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Nomination"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Shred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Surrender"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenReceived"): EventFragment;
}

export interface BeneficiaryTransferEventObject {
  fromBeneficiary: string;
  toBeneficiary: string;
  registry: string;
  tokenId: BigNumber;
}
export type BeneficiaryTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  BeneficiaryTransferEventObject
>;

export type BeneficiaryTransferEventFilter =
  TypedEventFilter<BeneficiaryTransferEvent>;

export interface HolderTransferEventObject {
  fromHolder: string;
  toHolder: string;
  registry: string;
  tokenId: BigNumber;
}
export type HolderTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  HolderTransferEventObject
>;

export type HolderTransferEventFilter = TypedEventFilter<HolderTransferEvent>;

export interface NominationEventObject {
  prevNominee: string;
  nominee: string;
  registry: string;
  tokenId: BigNumber;
}
export type NominationEvent = TypedEvent<
  [string, string, string, BigNumber],
  NominationEventObject
>;

export type NominationEventFilter = TypedEventFilter<NominationEvent>;

export interface ShredEventObject {
  registry: string;
  tokenId: BigNumber;
}
export type ShredEvent = TypedEvent<[string, BigNumber], ShredEventObject>;

export type ShredEventFilter = TypedEventFilter<ShredEvent>;

export interface SurrenderEventObject {
  surrenderer: string;
  registry: string;
  tokenId: BigNumber;
}
export type SurrenderEvent = TypedEvent<
  [string, string, BigNumber],
  SurrenderEventObject
>;

export type SurrenderEventFilter = TypedEventFilter<SurrenderEvent>;

export interface TokenReceivedEventObject {
  beneficiary: string;
  holder: string;
  isMinting: boolean;
  registry: string;
  tokenId: BigNumber;
}
export type TokenReceivedEvent = TypedEvent<
  [string, string, boolean, string, BigNumber],
  TokenReceivedEventObject
>;

export type TokenReceivedEventFilter = TypedEventFilter<TokenReceivedEvent>;

export interface ITitleEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITitleEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(overrides?: CallOverrides): Promise<[boolean]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    holder(overrides?: CallOverrides): Promise<[string]>;

    isHoldingToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominate(
      nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominee(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    shred(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    surrender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferBeneficiary(
      nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferHolder(
      newHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwners(
      nominee: string,
      newHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  active(overrides?: CallOverrides): Promise<boolean>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  holder(overrides?: CallOverrides): Promise<string>;

  isHoldingToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominate(
    nominee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominee(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  shred(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  surrender(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  transferBeneficiary(
    nominee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferHolder(
    newHolder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwners(
    nominee: string,
    newHolder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    active(overrides?: CallOverrides): Promise<boolean>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    holder(overrides?: CallOverrides): Promise<string>;

    isHoldingToken(overrides?: CallOverrides): Promise<boolean>;

    nominate(nominee: string, overrides?: CallOverrides): Promise<void>;

    nominee(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    shred(overrides?: CallOverrides): Promise<void>;

    surrender(overrides?: CallOverrides): Promise<void>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    transferBeneficiary(
      nominee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferHolder(newHolder: string, overrides?: CallOverrides): Promise<void>;

    transferOwners(
      nominee: string,
      newHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BeneficiaryTransfer(address,address,address,uint256)"(
      fromBeneficiary?: string | null,
      toBeneficiary?: string | null,
      registry?: null,
      tokenId?: null
    ): BeneficiaryTransferEventFilter;
    BeneficiaryTransfer(
      fromBeneficiary?: string | null,
      toBeneficiary?: string | null,
      registry?: null,
      tokenId?: null
    ): BeneficiaryTransferEventFilter;

    "HolderTransfer(address,address,address,uint256)"(
      fromHolder?: string | null,
      toHolder?: string | null,
      registry?: null,
      tokenId?: null
    ): HolderTransferEventFilter;
    HolderTransfer(
      fromHolder?: string | null,
      toHolder?: string | null,
      registry?: null,
      tokenId?: null
    ): HolderTransferEventFilter;

    "Nomination(address,address,address,uint256)"(
      prevNominee?: string | null,
      nominee?: string | null,
      registry?: null,
      tokenId?: null
    ): NominationEventFilter;
    Nomination(
      prevNominee?: string | null,
      nominee?: string | null,
      registry?: null,
      tokenId?: null
    ): NominationEventFilter;

    "Shred(address,uint256)"(registry?: null, tokenId?: null): ShredEventFilter;
    Shred(registry?: null, tokenId?: null): ShredEventFilter;

    "Surrender(address,address,uint256)"(
      surrenderer?: string | null,
      registry?: null,
      tokenId?: null
    ): SurrenderEventFilter;
    Surrender(
      surrenderer?: string | null,
      registry?: null,
      tokenId?: null
    ): SurrenderEventFilter;

    "TokenReceived(address,address,bool,address,uint256)"(
      beneficiary?: string | null,
      holder?: string | null,
      isMinting?: boolean | null,
      registry?: null,
      tokenId?: null
    ): TokenReceivedEventFilter;
    TokenReceived(
      beneficiary?: string | null,
      holder?: string | null,
      isMinting?: boolean | null,
      registry?: null,
      tokenId?: null
    ): TokenReceivedEventFilter;
  };

  estimateGas: {
    active(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    holder(overrides?: CallOverrides): Promise<BigNumber>;

    isHoldingToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominate(
      nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominee(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    shred(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    surrender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    transferBeneficiary(
      nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferHolder(
      newHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwners(
      nominee: string,
      newHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isHoldingToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominate(
      nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shred(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    surrender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferBeneficiary(
      nominee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferHolder(
      newHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwners(
      nominee: string,
      newHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
